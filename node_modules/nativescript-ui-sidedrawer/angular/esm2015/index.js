import { Component, Input, ElementRef, Inject, ViewContainerRef, Directive, EventEmitter, Output, NgModule } from '@angular/core';
import { registerElement } from '@nativescript/angular';
import { RadSideDrawer } from 'nativescript-ui-sidedrawer';
const TKDRAWERCONTENT = 'TKDrawerContent';
const TKMAINCONTENT = 'TKMainContent';
/**
 * This is the SideDrawer component. It separates your mobile app's screen
 * into a main part and a menu part whereby the menu part is shown upon a swipe
 * gesture using a transition effect.
 */
export class RadSideDrawerComponent {
    constructor(elementRef, viewContainer) {
        this.elementRef = elementRef;
        this.viewContainer = viewContainer;
        this.drawerOpening = new EventEmitter();
        this.drawerOpen = new EventEmitter();
        this.drawerClosing = new EventEmitter();
        this.drawerClosed = new EventEmitter();
        this.sideDrawer = this.elementRef.nativeElement;
    }
    /**
     * [Deprecated: Please use the 'drawerTransition' property instead].
     */
    set transition(transition) {
        this.sideDrawer.drawerTransition = transition;
    }
    get nativeElement() {
        return this.sideDrawer;
    }
    /**
     * Defines either the width or the height
     * of the menu pane depending on the location of the SideDrawer.
     * Top or Bottom - height, Right or Left - width.
     */
    set drawerContentSize(value) {
        this._drawerContentSize = value;
        this.updateContentSize();
    }
    set gesturesEnabled(value) {
        this._gesturesEnabled = value;
        this.updateGesturesEnabled();
    }
    set drawerTransition(value) {
        this._drawerTransition = value;
        this.updateDrawerTransition();
    }
    set drawerLocation(value) {
        this._drawerLocation = value;
        this.updateDrawerLocation();
    }
    updateDrawerLocation() {
        this.sideDrawer.drawerLocation = this._drawerLocation;
    }
    updateDrawerTransition() {
        this.sideDrawer.drawerTransition = this._drawerTransition;
    }
    updateGesturesEnabled() {
        this.sideDrawer.gesturesEnabled = this._gesturesEnabled;
    }
    updateContentSize() {
        this.sideDrawer.drawerContentSize = this._drawerContentSize;
    }
}
RadSideDrawerComponent.decorators = [
    { type: Component, args: [{
                selector: 'RadSideDrawer',
                template: '<ng-content></ng-content>'
            },] }
];
RadSideDrawerComponent.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] },
    { type: ViewContainerRef, decorators: [{ type: Inject, args: [ViewContainerRef,] }] }
];
RadSideDrawerComponent.propDecorators = {
    drawerOpening: [{ type: Output }],
    drawerOpen: [{ type: Output }],
    drawerClosing: [{ type: Output }],
    drawerClosed: [{ type: Output }],
    transition: [{ type: Input }]
};
/**
 * Directive identifying the drawer content.
 */
export class TKDrawerContentDirective {
    constructor(_elementRef) {
        this._elementRef = _elementRef;
        this._elementRef.nativeElement.id = TKDRAWERCONTENT;
    }
}
TKDrawerContentDirective.decorators = [
    { type: Directive, args: [{
                selector: '[tkDrawerContent]'
            },] }
];
TKDrawerContentDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
/**
 * Directive identifying the main content.
 */
export class TKMainContentDirective {
    constructor(_elementRef) {
        this._elementRef = _elementRef;
        this._elementRef.nativeElement.id = TKMAINCONTENT;
    }
}
TKMainContentDirective.decorators = [
    { type: Directive, args: [{
                selector: '[tkMainContent]'
            },] }
];
TKMainContentDirective.ctorParameters = () => [
    { type: ElementRef, decorators: [{ type: Inject, args: [ElementRef,] }] }
];
const ɵ0 = (parent, child) => {
    const drawer = parent;
    const childView = child;
    if (childView.id === TKMAINCONTENT) {
        drawer.mainContent = childView;
    }
    if (childView.id === TKDRAWERCONTENT) {
        drawer.drawerContent = childView;
    }
}, ɵ1 = (parent, child) => {
    const drawer = parent;
    const childView = child;
    if (childView.id === TKMAINCONTENT) {
        drawer.mainContent = null;
    }
    if (childView.id === TKDRAWERCONTENT) {
        drawer.drawerContent = null;
    }
};
let sideDrawerMeta = {
    insertChild: ɵ0,
    removeChild: ɵ1
};
/**
 * Directives identifying the RadSideDrawer.
 */
export const SIDEDRAWER_DIRECTIVES = [RadSideDrawerComponent, TKDrawerContentDirective, TKMainContentDirective];
registerElement('RadSideDrawer', () => RadSideDrawer, sideDrawerMeta);
/**
 * NgModule containing all of the RadSideDrawer directives.
 */
export class NativeScriptUISideDrawerModule {
}
NativeScriptUISideDrawerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [SIDEDRAWER_DIRECTIVES],
                exports: [SIDEDRAWER_DIRECTIVES]
            },] }
];
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,