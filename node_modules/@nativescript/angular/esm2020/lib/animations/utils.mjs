import { KeyframeAnimation, parseKeyframeDeclarations, animationTimingFunctionConverter } from '@nativescript/core';
const DASH_CASE_REGEXP = /-+([a-z0-9])/g;
export function dashCaseToCamelCase(input) {
    return input.replace(DASH_CASE_REGEXP, (...m) => m[1].toUpperCase());
}
export function createKeyframeAnimation(styles, duration, delay, easing) {
    const info = createKeyframeAnimationInfo(styles, duration, delay, easing);
    return KeyframeAnimation.keyframeAnimationFromInfo(info);
}
const createKeyframeAnimationInfo = (styles, duration, delay, easing) => ({
    isForwards: true,
    duration: duration || 0.01,
    delay,
    curve: getCurve(easing),
    keyframes: styles.map(parseAnimationKeyframe),
});
const getCurve = (value) => animationTimingFunctionConverter(value);
const parseAnimationKeyframe = (styles) => ({
    duration: getKeyframeDuration(styles),
    declarations: getDeclarations(styles),
});
const getKeyframeDuration = (styles) => styles.offset;
function getDeclarations(styles) {
    const unparsedDeclarations = Object.keys(styles).map((property) => ({ property, value: styles[property] }));
    return parseKeyframeDeclarations(unparsedDeclarations);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9hbmd1bGFyL3NyYy9saWIvYW5pbWF0aW9ucy91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQTRELHlCQUF5QixFQUFFLGdDQUFnQyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFPOUssTUFBTSxnQkFBZ0IsR0FBRyxlQUFlLENBQUM7QUFDekMsTUFBTSxVQUFVLG1CQUFtQixDQUFDLEtBQWE7SUFDL0MsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLENBQUMsR0FBRyxDQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0FBQzlFLENBQUM7QUFFRCxNQUFNLFVBQVUsdUJBQXVCLENBQUMsTUFBa0IsRUFBRSxRQUFnQixFQUFFLEtBQWEsRUFBRSxNQUFjO0lBQ3pHLE1BQU0sSUFBSSxHQUFHLDJCQUEyQixDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzFFLE9BQU8saUJBQWlCLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDM0QsQ0FBQztBQUVELE1BQU0sMkJBQTJCLEdBQUcsQ0FBQyxNQUFrQixFQUFFLFFBQWdCLEVBQUUsS0FBYSxFQUFFLE1BQWMsRUFBeUIsRUFBRSxDQUFDLENBQUM7SUFDbkksVUFBVSxFQUFFLElBQUk7SUFDaEIsUUFBUSxFQUFFLFFBQVEsSUFBSSxJQUFJO0lBQzFCLEtBQUs7SUFDTCxLQUFLLEVBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQztJQUN2QixTQUFTLEVBQUUsTUFBTSxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQztDQUM5QyxDQUFDLENBQUM7QUFFSCxNQUFNLFFBQVEsR0FBRyxDQUFDLEtBQWEsRUFBRSxFQUFFLENBQUMsZ0NBQWdDLENBQUMsS0FBSyxDQUFDLENBQUM7QUFFNUUsTUFBTSxzQkFBc0IsR0FBRyxDQUFDLE1BQWdCLEVBQWdCLEVBQUUsQ0FBQyxDQUFDO0lBQ2xFLFFBQVEsRUFBRSxtQkFBbUIsQ0FBQyxNQUFNLENBQUM7SUFDckMsWUFBWSxFQUFFLGVBQWUsQ0FBQyxNQUFNLENBQUM7Q0FDdEMsQ0FBQyxDQUFDO0FBRUgsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLE1BQWdCLEVBQVUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFFeEUsU0FBUyxlQUFlLENBQUMsTUFBZ0I7SUFDdkMsTUFBTSxvQkFBb0IsR0FBMEIsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUVuSSxPQUFPLHlCQUF5QixDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDekQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEtleWZyYW1lQW5pbWF0aW9uLCBLZXlmcmFtZUFuaW1hdGlvbkluZm8sIEtleWZyYW1lRGVjbGFyYXRpb24sIEtleWZyYW1lSW5mbywgcGFyc2VLZXlmcmFtZURlY2xhcmF0aW9ucywgYW5pbWF0aW9uVGltaW5nRnVuY3Rpb25Db252ZXJ0ZXIgfSBmcm9tICdAbmF0aXZlc2NyaXB0L2NvcmUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEtleWZyYW1lIHtcbiAgW2tleTogc3RyaW5nXTogc3RyaW5nIHwgbnVtYmVyO1xuICBvZmZzZXQ6IG51bWJlcjtcbn1cblxuY29uc3QgREFTSF9DQVNFX1JFR0VYUCA9IC8tKyhbYS16MC05XSkvZztcbmV4cG9ydCBmdW5jdGlvbiBkYXNoQ2FzZVRvQ2FtZWxDYXNlKGlucHV0OiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gaW5wdXQucmVwbGFjZShEQVNIX0NBU0VfUkVHRVhQLCAoLi4ubTogYW55W10pID0+IG1bMV0udG9VcHBlckNhc2UoKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVLZXlmcmFtZUFuaW1hdGlvbihzdHlsZXM6IEtleWZyYW1lW10sIGR1cmF0aW9uOiBudW1iZXIsIGRlbGF5OiBudW1iZXIsIGVhc2luZzogc3RyaW5nKTogS2V5ZnJhbWVBbmltYXRpb24ge1xuICBjb25zdCBpbmZvID0gY3JlYXRlS2V5ZnJhbWVBbmltYXRpb25JbmZvKHN0eWxlcywgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcpO1xuICByZXR1cm4gS2V5ZnJhbWVBbmltYXRpb24ua2V5ZnJhbWVBbmltYXRpb25Gcm9tSW5mbyhpbmZvKTtcbn1cblxuY29uc3QgY3JlYXRlS2V5ZnJhbWVBbmltYXRpb25JbmZvID0gKHN0eWxlczogS2V5ZnJhbWVbXSwgZHVyYXRpb246IG51bWJlciwgZGVsYXk6IG51bWJlciwgZWFzaW5nOiBzdHJpbmcpOiBLZXlmcmFtZUFuaW1hdGlvbkluZm8gPT4gKHtcbiAgaXNGb3J3YXJkczogdHJ1ZSxcbiAgZHVyYXRpb246IGR1cmF0aW9uIHx8IDAuMDEsXG4gIGRlbGF5LFxuICBjdXJ2ZTogZ2V0Q3VydmUoZWFzaW5nKSxcbiAga2V5ZnJhbWVzOiBzdHlsZXMubWFwKHBhcnNlQW5pbWF0aW9uS2V5ZnJhbWUpLFxufSk7XG5cbmNvbnN0IGdldEN1cnZlID0gKHZhbHVlOiBzdHJpbmcpID0+IGFuaW1hdGlvblRpbWluZ0Z1bmN0aW9uQ29udmVydGVyKHZhbHVlKTtcblxuY29uc3QgcGFyc2VBbmltYXRpb25LZXlmcmFtZSA9IChzdHlsZXM6IEtleWZyYW1lKTogS2V5ZnJhbWVJbmZvID0+ICh7XG4gIGR1cmF0aW9uOiBnZXRLZXlmcmFtZUR1cmF0aW9uKHN0eWxlcyksXG4gIGRlY2xhcmF0aW9uczogZ2V0RGVjbGFyYXRpb25zKHN0eWxlcyksXG59KTtcblxuY29uc3QgZ2V0S2V5ZnJhbWVEdXJhdGlvbiA9IChzdHlsZXM6IEtleWZyYW1lKTogbnVtYmVyID0+IHN0eWxlcy5vZmZzZXQ7XG5cbmZ1bmN0aW9uIGdldERlY2xhcmF0aW9ucyhzdHlsZXM6IEtleWZyYW1lKTogS2V5ZnJhbWVEZWNsYXJhdGlvbltdIHtcbiAgY29uc3QgdW5wYXJzZWREZWNsYXJhdGlvbnM6IEtleWZyYW1lRGVjbGFyYXRpb25bXSA9IE9iamVjdC5rZXlzKHN0eWxlcykubWFwKChwcm9wZXJ0eSkgPT4gKHsgcHJvcGVydHksIHZhbHVlOiBzdHlsZXNbcHJvcGVydHldIH0pKTtcblxuICByZXR1cm4gcGFyc2VLZXlmcmFtZURlY2xhcmF0aW9ucyh1bnBhcnNlZERlY2xhcmF0aW9ucyk7XG59XG4iXX0=