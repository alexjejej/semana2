import { NgModule, NO_ERRORS_SCHEMA, Optional, SkipSelf } from '@angular/core';
import { RouterModule, RouteReuseStrategy } from '@angular/router';
import { LocationStrategy, PlatformLocation } from '@angular/common';
import { NSRouterLink } from './ns-router-link';
import { NSRouterLinkActive } from './ns-router-link-active';
import { PageRouterOutlet } from './page-router-outlet';
import { NSLocationStrategy } from './ns-location-strategy';
import { NativescriptPlatformLocation } from './ns-platform-location';
import { NSRouteReuseStrategy } from './ns-route-reuse-strategy';
import { RouterExtensions } from './router-extensions';
import { FrameService } from '../frame.service';
import { NSEmptyOutletComponent } from './ns-empty-outlet.component';
import { NativeScriptCommonModule } from '../../nativescript-common.module';
import { START_PATH } from '../../tokens';
import * as i0 from "@angular/core";
export { PageRoute } from './page-router-outlet';
export { RouterExtensions } from './router-extensions';
export { Outlet, defaultNavOptions } from './ns-location-utils';
export { NSRouterLink } from './ns-router-link';
export { NSRouterLinkActive } from './ns-router-link-active';
export { PageRouterOutlet } from './page-router-outlet';
export { NSLocationStrategy } from './ns-location-strategy';
export { NSEmptyOutletComponent } from './ns-empty-outlet.component';
export function provideLocationStrategy(locationStrategy, frameService, startPath) {
    return locationStrategy ? locationStrategy : new NSLocationStrategy(frameService, startPath);
}
export class NativeScriptRouterModule {
    static forRoot(routes, config) {
        return {
            ngModule: NativeScriptRouterModule,
            providers: [
                ...RouterModule.forRoot(routes, config).providers,
                {
                    provide: NSLocationStrategy,
                    useFactory: provideLocationStrategy,
                    deps: [[NSLocationStrategy, new Optional(), new SkipSelf()], FrameService, [new Optional(), START_PATH]],
                },
                { provide: LocationStrategy, useExisting: NSLocationStrategy },
                NativescriptPlatformLocation,
                { provide: PlatformLocation, useExisting: NativescriptPlatformLocation },
                RouterExtensions,
                NSRouteReuseStrategy,
                { provide: RouteReuseStrategy, useExisting: NSRouteReuseStrategy },
            ],
        };
    }
    static forChild(routes) {
        return { ngModule: NativeScriptRouterModule, providers: RouterModule.forChild(routes).providers };
    }
}
NativeScriptRouterModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NativeScriptRouterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
NativeScriptRouterModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NativeScriptRouterModule, declarations: [NSRouterLink, NSRouterLinkActive, PageRouterOutlet, NSEmptyOutletComponent], imports: [RouterModule, NativeScriptCommonModule], exports: [RouterModule, NSRouterLink, NSRouterLinkActive, PageRouterOutlet, NSEmptyOutletComponent] });
NativeScriptRouterModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NativeScriptRouterModule, imports: [[RouterModule, NativeScriptCommonModule], RouterModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: NativeScriptRouterModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [NSRouterLink, NSRouterLinkActive, PageRouterOutlet, NSEmptyOutletComponent],
                    entryComponents: [NSEmptyOutletComponent],
                    imports: [RouterModule, NativeScriptCommonModule],
                    exports: [RouterModule, NSRouterLink, NSRouterLinkActive, PageRouterOutlet, NSEmptyOutletComponent],
                    schemas: [NO_ERRORS_SCHEMA],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2FuZ3VsYXIvc3JjL2xpYi9sZWdhY3kvcm91dGVyL3JvdXRlci5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBdUIsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNwRyxPQUFPLEVBQUUsWUFBWSxFQUF3QixrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3pGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNoRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUN4RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDaEQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDckUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDNUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQzs7QUFFMUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxNQUFNLEVBQW9DLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDbEcsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQzdELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRXJFLE1BQU0sVUFBVSx1QkFBdUIsQ0FBQyxnQkFBb0MsRUFBRSxZQUEwQixFQUFFLFNBQWlCO0lBQ3pILE9BQU8sZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxJQUFJLGtCQUFrQixDQUFDLFlBQVksRUFBRSxTQUFTLENBQUMsQ0FBQztBQUMvRixDQUFDO0FBU0QsTUFBTSxPQUFPLHdCQUF3QjtJQUNuQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQWMsRUFBRSxNQUFxQjtRQUNsRCxPQUFPO1lBQ0wsUUFBUSxFQUFFLHdCQUF3QjtZQUNsQyxTQUFTLEVBQUU7Z0JBQ1QsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxTQUFTO2dCQUNqRDtvQkFDRSxPQUFPLEVBQUUsa0JBQWtCO29CQUMzQixVQUFVLEVBQUUsdUJBQXVCO29CQUNuQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLGtCQUFrQixFQUFFLElBQUksUUFBUSxFQUFFLEVBQUUsSUFBSSxRQUFRLEVBQUUsQ0FBQyxFQUFFLFlBQVksRUFBRSxDQUFDLElBQUksUUFBUSxFQUFFLEVBQUUsVUFBVSxDQUFDLENBQUM7aUJBQ3pHO2dCQUNELEVBQUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxrQkFBa0IsRUFBRTtnQkFDOUQsNEJBQTRCO2dCQUM1QixFQUFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsNEJBQTRCLEVBQUU7Z0JBQ3hFLGdCQUFnQjtnQkFDaEIsb0JBQW9CO2dCQUNwQixFQUFFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxXQUFXLEVBQUUsb0JBQW9CLEVBQUU7YUFDbkU7U0FDRixDQUFDO0lBQ0osQ0FBQztJQUVELE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBYztRQUM1QixPQUFPLEVBQUUsUUFBUSxFQUFFLHdCQUF3QixFQUFFLFNBQVMsRUFBRSxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3BHLENBQUM7O3FIQXZCVSx3QkFBd0I7c0hBQXhCLHdCQUF3QixpQkFOcEIsWUFBWSxFQUFFLGtCQUFrQixFQUFFLGdCQUFnQixFQUFFLHNCQUFzQixhQUUvRSxZQUFZLEVBQUUsd0JBQXdCLGFBQ3RDLFlBQVksRUFBRSxZQUFZLEVBQUUsa0JBQWtCLEVBQUUsZ0JBQWdCLEVBQUUsc0JBQXNCO3NIQUd2Rix3QkFBd0IsWUFKMUIsQ0FBQyxZQUFZLEVBQUUsd0JBQXdCLENBQUMsRUFDdkMsWUFBWTsyRkFHWCx3QkFBd0I7a0JBUHBDLFFBQVE7bUJBQUM7b0JBQ1IsWUFBWSxFQUFFLENBQUMsWUFBWSxFQUFFLGtCQUFrQixFQUFFLGdCQUFnQixFQUFFLHNCQUFzQixDQUFDO29CQUMxRixlQUFlLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQztvQkFDekMsT0FBTyxFQUFFLENBQUMsWUFBWSxFQUFFLHdCQUF3QixDQUFDO29CQUNqRCxPQUFPLEVBQUUsQ0FBQyxZQUFZLEVBQUUsWUFBWSxFQUFFLGtCQUFrQixFQUFFLGdCQUFnQixFQUFFLHNCQUFzQixDQUFDO29CQUNuRyxPQUFPLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQztpQkFDNUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSwgTW9kdWxlV2l0aFByb3ZpZGVycywgTk9fRVJST1JTX1NDSEVNQSwgT3B0aW9uYWwsIFNraXBTZWxmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXJNb2R1bGUsIFJvdXRlcywgRXh0cmFPcHRpb25zLCBSb3V0ZVJldXNlU3RyYXRlZ3kgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgTG9jYXRpb25TdHJhdGVneSwgUGxhdGZvcm1Mb2NhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBOU1JvdXRlckxpbmsgfSBmcm9tICcuL25zLXJvdXRlci1saW5rJztcbmltcG9ydCB7IE5TUm91dGVyTGlua0FjdGl2ZSB9IGZyb20gJy4vbnMtcm91dGVyLWxpbmstYWN0aXZlJztcbmltcG9ydCB7IFBhZ2VSb3V0ZXJPdXRsZXQgfSBmcm9tICcuL3BhZ2Utcm91dGVyLW91dGxldCc7XG5pbXBvcnQgeyBOU0xvY2F0aW9uU3RyYXRlZ3kgfSBmcm9tICcuL25zLWxvY2F0aW9uLXN0cmF0ZWd5JztcbmltcG9ydCB7IE5hdGl2ZXNjcmlwdFBsYXRmb3JtTG9jYXRpb24gfSBmcm9tICcuL25zLXBsYXRmb3JtLWxvY2F0aW9uJztcbmltcG9ydCB7IE5TUm91dGVSZXVzZVN0cmF0ZWd5IH0gZnJvbSAnLi9ucy1yb3V0ZS1yZXVzZS1zdHJhdGVneSc7XG5pbXBvcnQgeyBSb3V0ZXJFeHRlbnNpb25zIH0gZnJvbSAnLi9yb3V0ZXItZXh0ZW5zaW9ucyc7XG5pbXBvcnQgeyBGcmFtZVNlcnZpY2UgfSBmcm9tICcuLi9mcmFtZS5zZXJ2aWNlJztcbmltcG9ydCB7IE5TRW1wdHlPdXRsZXRDb21wb25lbnQgfSBmcm9tICcuL25zLWVtcHR5LW91dGxldC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTmF0aXZlU2NyaXB0Q29tbW9uTW9kdWxlIH0gZnJvbSAnLi4vLi4vbmF0aXZlc2NyaXB0LWNvbW1vbi5tb2R1bGUnO1xuaW1wb3J0IHsgU1RBUlRfUEFUSCB9IGZyb20gJy4uLy4uL3Rva2Vucyc7XG5cbmV4cG9ydCB7IFBhZ2VSb3V0ZSB9IGZyb20gJy4vcGFnZS1yb3V0ZXItb3V0bGV0JztcbmV4cG9ydCB7IFJvdXRlckV4dGVuc2lvbnMgfSBmcm9tICcuL3JvdXRlci1leHRlbnNpb25zJztcbmV4cG9ydCB7IE91dGxldCwgTmF2aWdhdGlvbk9wdGlvbnMsIExvY2F0aW9uU3RhdGUsIGRlZmF1bHROYXZPcHRpb25zIH0gZnJvbSAnLi9ucy1sb2NhdGlvbi11dGlscyc7XG5leHBvcnQgeyBOU1JvdXRlckxpbmsgfSBmcm9tICcuL25zLXJvdXRlci1saW5rJztcbmV4cG9ydCB7IE5TUm91dGVyTGlua0FjdGl2ZSB9IGZyb20gJy4vbnMtcm91dGVyLWxpbmstYWN0aXZlJztcbmV4cG9ydCB7IFBhZ2VSb3V0ZXJPdXRsZXQgfSBmcm9tICcuL3BhZ2Utcm91dGVyLW91dGxldCc7XG5leHBvcnQgeyBOU0xvY2F0aW9uU3RyYXRlZ3kgfSBmcm9tICcuL25zLWxvY2F0aW9uLXN0cmF0ZWd5JztcbmV4cG9ydCB7IE5TRW1wdHlPdXRsZXRDb21wb25lbnQgfSBmcm9tICcuL25zLWVtcHR5LW91dGxldC5jb21wb25lbnQnO1xuXG5leHBvcnQgZnVuY3Rpb24gcHJvdmlkZUxvY2F0aW9uU3RyYXRlZ3kobG9jYXRpb25TdHJhdGVneTogTlNMb2NhdGlvblN0cmF0ZWd5LCBmcmFtZVNlcnZpY2U6IEZyYW1lU2VydmljZSwgc3RhcnRQYXRoOiBzdHJpbmcpOiBOU0xvY2F0aW9uU3RyYXRlZ3kge1xuICByZXR1cm4gbG9jYXRpb25TdHJhdGVneSA/IGxvY2F0aW9uU3RyYXRlZ3kgOiBuZXcgTlNMb2NhdGlvblN0cmF0ZWd5KGZyYW1lU2VydmljZSwgc3RhcnRQYXRoKTtcbn1cblxuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbTlNSb3V0ZXJMaW5rLCBOU1JvdXRlckxpbmtBY3RpdmUsIFBhZ2VSb3V0ZXJPdXRsZXQsIE5TRW1wdHlPdXRsZXRDb21wb25lbnRdLFxuICBlbnRyeUNvbXBvbmVudHM6IFtOU0VtcHR5T3V0bGV0Q29tcG9uZW50XSxcbiAgaW1wb3J0czogW1JvdXRlck1vZHVsZSwgTmF0aXZlU2NyaXB0Q29tbW9uTW9kdWxlXSxcbiAgZXhwb3J0czogW1JvdXRlck1vZHVsZSwgTlNSb3V0ZXJMaW5rLCBOU1JvdXRlckxpbmtBY3RpdmUsIFBhZ2VSb3V0ZXJPdXRsZXQsIE5TRW1wdHlPdXRsZXRDb21wb25lbnRdLFxuICBzY2hlbWFzOiBbTk9fRVJST1JTX1NDSEVNQV0sXG59KVxuZXhwb3J0IGNsYXNzIE5hdGl2ZVNjcmlwdFJvdXRlck1vZHVsZSB7XG4gIHN0YXRpYyBmb3JSb290KHJvdXRlczogUm91dGVzLCBjb25maWc/OiBFeHRyYU9wdGlvbnMpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPE5hdGl2ZVNjcmlwdFJvdXRlck1vZHVsZT4ge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTmF0aXZlU2NyaXB0Um91dGVyTW9kdWxlLFxuICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIC4uLlJvdXRlck1vZHVsZS5mb3JSb290KHJvdXRlcywgY29uZmlnKS5wcm92aWRlcnMsXG4gICAgICAgIHtcbiAgICAgICAgICBwcm92aWRlOiBOU0xvY2F0aW9uU3RyYXRlZ3ksXG4gICAgICAgICAgdXNlRmFjdG9yeTogcHJvdmlkZUxvY2F0aW9uU3RyYXRlZ3ksXG4gICAgICAgICAgZGVwczogW1tOU0xvY2F0aW9uU3RyYXRlZ3ksIG5ldyBPcHRpb25hbCgpLCBuZXcgU2tpcFNlbGYoKV0sIEZyYW1lU2VydmljZSwgW25ldyBPcHRpb25hbCgpLCBTVEFSVF9QQVRIXV0sXG4gICAgICAgIH0sXG4gICAgICAgIHsgcHJvdmlkZTogTG9jYXRpb25TdHJhdGVneSwgdXNlRXhpc3Rpbmc6IE5TTG9jYXRpb25TdHJhdGVneSB9LFxuICAgICAgICBOYXRpdmVzY3JpcHRQbGF0Zm9ybUxvY2F0aW9uLFxuICAgICAgICB7IHByb3ZpZGU6IFBsYXRmb3JtTG9jYXRpb24sIHVzZUV4aXN0aW5nOiBOYXRpdmVzY3JpcHRQbGF0Zm9ybUxvY2F0aW9uIH0sXG4gICAgICAgIFJvdXRlckV4dGVuc2lvbnMsXG4gICAgICAgIE5TUm91dGVSZXVzZVN0cmF0ZWd5LFxuICAgICAgICB7IHByb3ZpZGU6IFJvdXRlUmV1c2VTdHJhdGVneSwgdXNlRXhpc3Rpbmc6IE5TUm91dGVSZXVzZVN0cmF0ZWd5IH0sXG4gICAgICBdLFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZm9yQ2hpbGQocm91dGVzOiBSb3V0ZXMpOiBNb2R1bGVXaXRoUHJvdmlkZXJzPE5hdGl2ZVNjcmlwdFJvdXRlck1vZHVsZT4ge1xuICAgIHJldHVybiB7IG5nTW9kdWxlOiBOYXRpdmVTY3JpcHRSb3V0ZXJNb2R1bGUsIHByb3ZpZGVyczogUm91dGVyTW9kdWxlLmZvckNoaWxkKHJvdXRlcykucHJvdmlkZXJzIH07XG4gIH1cbn1cbiJdfQ==