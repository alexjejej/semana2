export class Outlet {
    constructor(outletKey, path, pathByOutlets, modalNavigationDepth) {
        this._navigatingBackOutlets = new Set();
        // More than one frame available when using NSEmptyOutletComponent component
        // in module that lazy loads children (loadChildren) and has outlet name.
        this.frames = [];
        this.states = [];
        // Used in reuse-strategy by its children to determine if they should be detached too.
        this.shouldDetach = true;
        this.outletKeys = [outletKey];
        this.isPageNavigationBack = false;
        this.showingModal = false;
        this.modalNavigationDepth = modalNavigationDepth || 0;
        this.pathByOutlets = pathByOutlets;
        this.path = path;
    }
    get isPageNavigationBack() {
        return this._navigatingBackOutlets.size > 0;
    }
    set isPageNavigationBack(isBack) {
        if (!isBack) {
            if (this._navigatingBackOutlets.size > 0) {
                this._navigatingBackOutlets.delete(this._navigatingBackOutlets.values().next().value);
            }
        }
        else {
            for (const key of this.outletKeys) {
                this._navigatingBackOutlets.add(key);
            }
        }
    }
    containsFrame(frame) {
        return this.frames.indexOf(frame) > -1;
    }
    peekState() {
        if (this.states.length > 0) {
            return this.states[this.states.length - 1];
        }
        return null;
    }
    containsTopState(stateUrl) {
        const lastState = this.peekState();
        return lastState && lastState.segmentGroup.toString() === stateUrl;
    }
    // Search for frame that can go back.
    // Nested 'primary' outlets could result in Outlet with multiple navigatable frames.
    getFrameToBack() {
        let frame = this.frames[this.frames.length - 1];
        if (!this.isNSEmptyOutlet) {
            for (let index = this.frames.length - 1; index >= 0; index--) {
                const currentFrame = this.frames[index];
                if (currentFrame.canGoBack()) {
                    frame = currentFrame;
                    break;
                }
            }
        }
        return frame;
    }
}
export const defaultNavOptions = {
    clearHistory: false,
    animated: true,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnMtbG9jYXRpb24tdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9hbmd1bGFyL3NyYy9saWIvbGVnYWN5L3JvdXRlci9ucy1sb2NhdGlvbi11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpQkEsTUFBTSxPQUFPLE1BQU07SUFxQ2pCLFlBQVksU0FBaUIsRUFBRSxJQUFZLEVBQUUsYUFBcUIsRUFBRSxvQkFBNkI7UUFqQ2pHLDJCQUFzQixHQUFHLElBQUksR0FBRyxFQUFVLENBQUM7UUFvQjNDLDRFQUE0RTtRQUM1RSx5RUFBeUU7UUFDekUsV0FBTSxHQUFpQixFQUFFLENBQUM7UUFNMUIsV0FBTSxHQUF5QixFQUFFLENBQUM7UUFHbEMsc0ZBQXNGO1FBQ3RGLGlCQUFZLEdBQVksSUFBSSxDQUFDO1FBRTNCLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsb0JBQW9CLEdBQUcsS0FBSyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDO1FBQzFCLElBQUksQ0FBQyxvQkFBb0IsR0FBRyxvQkFBb0IsSUFBSSxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLGFBQWEsR0FBRyxhQUFhLENBQUM7UUFDbkMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbkIsQ0FBQztJQXZDRCxJQUFJLG9CQUFvQjtRQUN0QixPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFDRCxJQUFJLG9CQUFvQixDQUFDLE1BQWU7UUFDdEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNYLElBQUksSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksR0FBRyxDQUFDLEVBQUU7Z0JBQ3hDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ3ZGO1NBQ0Y7YUFBTTtZQUNMLEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtnQkFDakMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUN0QztTQUNGO0lBQ0gsQ0FBQztJQTRCRCxhQUFhLENBQUMsS0FBWTtRQUN4QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxTQUFTO1FBQ1AsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDMUIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzVDO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsUUFBZ0I7UUFDL0IsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ25DLE9BQU8sU0FBUyxJQUFJLFNBQVMsQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLEtBQUssUUFBUSxDQUFDO0lBQ3JFLENBQUM7SUFFRCxxQ0FBcUM7SUFDckMsb0ZBQW9GO0lBQ3BGLGNBQWM7UUFDWixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRWhELElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3pCLEtBQUssSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLEtBQUssSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUU7Z0JBQzVELE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3hDLElBQUksWUFBWSxDQUFDLFNBQVMsRUFBRSxFQUFFO29CQUM1QixLQUFLLEdBQUcsWUFBWSxDQUFDO29CQUNyQixNQUFNO2lCQUNQO2FBQ0Y7U0FDRjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztDQUNGO0FBRUQsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQXNCO0lBQ2xELFlBQVksRUFBRSxLQUFLO0lBQ25CLFFBQVEsRUFBRSxJQUFJO0NBQ2YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZyYW1lLCBOYXZpZ2F0aW9uVHJhbnNpdGlvbiB9IGZyb20gJ0BuYXRpdmVzY3JpcHQvY29yZSc7XG5pbXBvcnQgeyBEZWZhdWx0VXJsU2VyaWFsaXplciwgVXJsU2VnbWVudEdyb3VwLCBVcmxUcmVlLCBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBQYXJhbXMgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIExvY2F0aW9uU3RhdGUge1xuICBxdWVyeVBhcmFtczogUGFyYW1zO1xuICBzZWdtZW50R3JvdXA6IFVybFNlZ21lbnRHcm91cDtcbiAgaXNSb290U2VnbWVudEdyb3VwOiBib29sZWFuO1xuICBpc1BhZ2VOYXZpZ2F0aW9uOiBib29sZWFuO1xuICBmcmFtZT86IEZyYW1lO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5hdmlnYXRpb25PcHRpb25zIHtcbiAgY2xlYXJIaXN0b3J5PzogYm9vbGVhbjtcbiAgYW5pbWF0ZWQ/OiBib29sZWFuO1xuICB0cmFuc2l0aW9uPzogTmF2aWdhdGlvblRyYW5zaXRpb247XG59XG5cbmV4cG9ydCBjbGFzcyBPdXRsZXQge1xuICBzaG93aW5nTW9kYWw6IGJvb2xlYW47XG4gIG1vZGFsTmF2aWdhdGlvbkRlcHRoOiBudW1iZXI7XG4gIHBhcmVudDogT3V0bGV0O1xuICBfbmF2aWdhdGluZ0JhY2tPdXRsZXRzID0gbmV3IFNldDxzdHJpbmc+KCk7XG4gIGdldCBpc1BhZ2VOYXZpZ2F0aW9uQmFjaygpIHtcbiAgICByZXR1cm4gdGhpcy5fbmF2aWdhdGluZ0JhY2tPdXRsZXRzLnNpemUgPiAwO1xuICB9XG4gIHNldCBpc1BhZ2VOYXZpZ2F0aW9uQmFjayhpc0JhY2s6IGJvb2xlYW4pIHtcbiAgICBpZiAoIWlzQmFjaykge1xuICAgICAgaWYgKHRoaXMuX25hdmlnYXRpbmdCYWNrT3V0bGV0cy5zaXplID4gMCkge1xuICAgICAgICB0aGlzLl9uYXZpZ2F0aW5nQmFja091dGxldHMuZGVsZXRlKHRoaXMuX25hdmlnYXRpbmdCYWNrT3V0bGV0cy52YWx1ZXMoKS5uZXh0KCkudmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGNvbnN0IGtleSBvZiB0aGlzLm91dGxldEtleXMpIHtcbiAgICAgICAgdGhpcy5fbmF2aWdhdGluZ0JhY2tPdXRsZXRzLmFkZChrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIE1vcmUgdGhhbiBvbmUga2V5IGF2YWlsYWJsZSB3aGVuIHVzaW5nIE5TRW1wdHlPdXRsZXRDb21wb25lbnQgY29tcG9uZW50XG4gIC8vIGluIG1vZHVsZSB0aGF0IGxhenkgbG9hZHMgY2hpbGRyZW4gKGxvYWRDaGlsZHJlbikgYW5kIGhhcyBvdXRsZXQgbmFtZS5cbiAgb3V0bGV0S2V5czogQXJyYXk8c3RyaW5nPjtcblxuICAvLyBNb3JlIHRoYW4gb25lIGZyYW1lIGF2YWlsYWJsZSB3aGVuIHVzaW5nIE5TRW1wdHlPdXRsZXRDb21wb25lbnQgY29tcG9uZW50XG4gIC8vIGluIG1vZHVsZSB0aGF0IGxhenkgbG9hZHMgY2hpbGRyZW4gKGxvYWRDaGlsZHJlbikgYW5kIGhhcyBvdXRsZXQgbmFtZS5cbiAgZnJhbWVzOiBBcnJheTxGcmFtZT4gPSBbXTtcbiAgLy8gVGhlIHVybCBwYXRoIHRvIHRoZSBPdXRsZXQuXG4gIC8vIEUuRzogdGhlIHBhdGggdG8gT3V0bGV0MyB0aGF0IGlzIG5lc3RlZCBPdXRsZXQxKGhvbWUpLT5PdXRsZXQyKG5lc3RlZDEpLT5PdXRsZXQzKG5lc3RlZDIpXG4gIC8vIHdpbGwgYmUgJ2hvbWUvbmVzdGVkMSdcbiAgcGF0aDogc3RyaW5nO1xuICBwYXRoQnlPdXRsZXRzOiBzdHJpbmc7XG4gIHN0YXRlczogQXJyYXk8TG9jYXRpb25TdGF0ZT4gPSBbXTtcbiAgaXNOU0VtcHR5T3V0bGV0OiBib29sZWFuO1xuXG4gIC8vIFVzZWQgaW4gcmV1c2Utc3RyYXRlZ3kgYnkgaXRzIGNoaWxkcmVuIHRvIGRldGVybWluZSBpZiB0aGV5IHNob3VsZCBiZSBkZXRhY2hlZCB0b28uXG4gIHNob3VsZERldGFjaDogYm9vbGVhbiA9IHRydWU7XG4gIGNvbnN0cnVjdG9yKG91dGxldEtleTogc3RyaW5nLCBwYXRoOiBzdHJpbmcsIHBhdGhCeU91dGxldHM6IHN0cmluZywgbW9kYWxOYXZpZ2F0aW9uRGVwdGg/OiBudW1iZXIpIHtcbiAgICB0aGlzLm91dGxldEtleXMgPSBbb3V0bGV0S2V5XTtcbiAgICB0aGlzLmlzUGFnZU5hdmlnYXRpb25CYWNrID0gZmFsc2U7XG4gICAgdGhpcy5zaG93aW5nTW9kYWwgPSBmYWxzZTtcbiAgICB0aGlzLm1vZGFsTmF2aWdhdGlvbkRlcHRoID0gbW9kYWxOYXZpZ2F0aW9uRGVwdGggfHwgMDtcbiAgICB0aGlzLnBhdGhCeU91dGxldHMgPSBwYXRoQnlPdXRsZXRzO1xuICAgIHRoaXMucGF0aCA9IHBhdGg7XG4gIH1cblxuICBjb250YWluc0ZyYW1lKGZyYW1lOiBGcmFtZSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLmZyYW1lcy5pbmRleE9mKGZyYW1lKSA+IC0xO1xuICB9XG5cbiAgcGVla1N0YXRlKCk6IExvY2F0aW9uU3RhdGUge1xuICAgIGlmICh0aGlzLnN0YXRlcy5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5zdGF0ZXNbdGhpcy5zdGF0ZXMubGVuZ3RoIC0gMV07XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29udGFpbnNUb3BTdGF0ZShzdGF0ZVVybDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgY29uc3QgbGFzdFN0YXRlID0gdGhpcy5wZWVrU3RhdGUoKTtcbiAgICByZXR1cm4gbGFzdFN0YXRlICYmIGxhc3RTdGF0ZS5zZWdtZW50R3JvdXAudG9TdHJpbmcoKSA9PT0gc3RhdGVVcmw7XG4gIH1cblxuICAvLyBTZWFyY2ggZm9yIGZyYW1lIHRoYXQgY2FuIGdvIGJhY2suXG4gIC8vIE5lc3RlZCAncHJpbWFyeScgb3V0bGV0cyBjb3VsZCByZXN1bHQgaW4gT3V0bGV0IHdpdGggbXVsdGlwbGUgbmF2aWdhdGFibGUgZnJhbWVzLlxuICBnZXRGcmFtZVRvQmFjaygpOiBGcmFtZSB7XG4gICAgbGV0IGZyYW1lID0gdGhpcy5mcmFtZXNbdGhpcy5mcmFtZXMubGVuZ3RoIC0gMV07XG5cbiAgICBpZiAoIXRoaXMuaXNOU0VtcHR5T3V0bGV0KSB7XG4gICAgICBmb3IgKGxldCBpbmRleCA9IHRoaXMuZnJhbWVzLmxlbmd0aCAtIDE7IGluZGV4ID49IDA7IGluZGV4LS0pIHtcbiAgICAgICAgY29uc3QgY3VycmVudEZyYW1lID0gdGhpcy5mcmFtZXNbaW5kZXhdO1xuICAgICAgICBpZiAoY3VycmVudEZyYW1lLmNhbkdvQmFjaygpKSB7XG4gICAgICAgICAgZnJhbWUgPSBjdXJyZW50RnJhbWU7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZnJhbWU7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGRlZmF1bHROYXZPcHRpb25zOiBOYXZpZ2F0aW9uT3B0aW9ucyA9IHtcbiAgY2xlYXJIaXN0b3J5OiBmYWxzZSxcbiAgYW5pbWF0ZWQ6IHRydWUsXG59O1xuIl19