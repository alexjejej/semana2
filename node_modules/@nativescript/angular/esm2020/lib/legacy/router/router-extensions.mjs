import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { NSLocationStrategy } from './ns-location-strategy';
import { FrameService } from '../frame.service';
import { NativeScriptDebug } from '../../trace';
import { findTopActivatedRouteNodeForOutlet } from './page-router-outlet-utils';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "./ns-location-strategy";
import * as i3 from "../frame.service";
export class RouterExtensions {
    constructor(router, locationStrategy, frameService) {
        this.router = router;
        this.locationStrategy = locationStrategy;
        this.frameService = frameService;
    }
    navigate(commands, extras) {
        if (extras) {
            this.locationStrategy._setNavigationOptions(extras);
        }
        return this.router.navigate(commands, extras);
    }
    navigateByUrl(url, options) {
        if (options) {
            this.locationStrategy._setNavigationOptions(options);
        }
        return this.router.navigateByUrl(url);
    }
    back(backNavigationOptions) {
        if (backNavigationOptions) {
            this.backOutlets(backNavigationOptions);
        }
        else {
            this.locationStrategy.back();
        }
    }
    canGoBack(backNavigationOptions) {
        let canGoBack = true;
        if (backNavigationOptions) {
            const { outletsToBack, outlets } = this.findOutletsToBack(backNavigationOptions);
            if (outletsToBack.length !== outlets.length) {
                NativeScriptDebug.routerError('No outlet found relative to activated route');
            }
            else {
                outletsToBack.forEach((outletToBack) => {
                    if (!this.locationStrategy.canGoBack(outletToBack)) {
                        canGoBack = false;
                    }
                });
            }
        }
        else {
            canGoBack = this.locationStrategy.canGoBack();
        }
        return canGoBack;
    }
    backToPreviousPage() {
        this.frameService.getFrame().goBack();
    }
    canGoBackToPreviousPage() {
        return this.frameService.getFrame().canGoBack();
    }
    backOutlets(options) {
        const { outletsToBack, outlets } = this.findOutletsToBack(options);
        if (outletsToBack.length !== outlets.length) {
            NativeScriptDebug.routerError('No outlet found relative to activated route');
        }
        else {
            outletsToBack.forEach((outletToBack) => {
                if (outletToBack.isPageNavigationBack) {
                    NativeScriptDebug.routerError('Attempted to call startGoBack while going back:');
                }
                else {
                    this.locationStrategy.back(outletToBack);
                }
            });
        }
    }
    // tslint:disable-next-line:max-line-length
    findOutletsToBack(options) {
        const outletsToBack = [];
        const rootRoute = this.router.routerState.root;
        let outlets = options.outlets;
        let relativeRoute = options.relativeTo || rootRoute;
        const relativeRouteOutlet = this.findOutletByRoute(relativeRoute);
        const isNSEmptyOutlet = relativeRouteOutlet && relativeRouteOutlet.isNSEmptyOutlet;
        // Lazy named outlet has added 'primary' inner NSEmptyOutlet child.
        // Take parent route when `relativeTo` option points to the outer named outlet.
        if (isNSEmptyOutlet && relativeRoute.outlet !== 'primary') {
            relativeRoute = relativeRoute.parent || relativeRoute;
        }
        const routesToMatch = outlets ? relativeRoute.children : [relativeRoute];
        outlets = outlets || [relativeRoute.outlet];
        for (let index = 0; index < routesToMatch.length; index++) {
            const currentRoute = routesToMatch[index];
            if (outlets.some((currentOutlet) => currentOutlet === currentRoute.outlet)) {
                const outlet = this.findOutletByRoute(currentRoute);
                if (outlet) {
                    outletsToBack.push(outlet);
                }
            }
        }
        return { outletsToBack: outletsToBack, outlets: outlets };
    }
    findOutletByRoute(currentRoute) {
        let outlet;
        const currentRouteSnapshop = findTopActivatedRouteNodeForOutlet(currentRoute.snapshot);
        const outletKey = this.locationStrategy.getRouteFullPath(currentRouteSnapshop);
        outlet = this.locationStrategy.findOutlet(outletKey, currentRouteSnapshop);
        return outlet;
    }
}
RouterExtensions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: RouterExtensions, deps: [{ token: i1.Router }, { token: i2.NSLocationStrategy }, { token: i3.FrameService }], target: i0.ɵɵFactoryTarget.Injectable });
RouterExtensions.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: RouterExtensions, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.1.1", ngImport: i0, type: RouterExtensions, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: i1.Router }, { type: i2.NSLocationStrategy }, { type: i3.FrameService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLWV4dGVuc2lvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9hbmd1bGFyL3NyYy9saWIvbGVnYWN5L3JvdXRlci9yb3V0ZXItZXh0ZW5zaW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxNQUFNLEVBQTZDLE1BQU0saUJBQWlCLENBQUM7QUFDcEYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFNUQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNoRCxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQzs7Ozs7QUFZaEYsTUFBTSxPQUFPLGdCQUFnQjtJQUMzQixZQUFtQixNQUFjLEVBQVMsZ0JBQW9DLEVBQVMsWUFBMEI7UUFBOUYsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUFTLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBb0I7UUFBUyxpQkFBWSxHQUFaLFlBQVksQ0FBYztJQUFHLENBQUM7SUFFOUcsUUFBUSxDQUFDLFFBQWUsRUFBRSxNQUFpQztRQUNoRSxJQUFJLE1BQU0sRUFBRTtZQUNWLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNyRDtRQUNELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFTSxhQUFhLENBQUMsR0FBcUIsRUFBRSxPQUEyQjtRQUNyRSxJQUFJLE9BQU8sRUFBRTtZQUNYLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN0RDtR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QixnQkFBZ0IsY0FGZixNQUFNOzJGQUVQLGdCQUFnQjtrQkFINUIsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIsIFVybFRyZWUsIE5hdmlnYXRpb25FeHRyYXMsIEFjdGl2YXRlZFJvdXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IE5TTG9jYXRpb25TdHJhdGVneSB9IGZyb20gJy4vbnMtbG9jYXRpb24tc3RyYXRlZ3knO1xuaW1wb3J0IHsgTmF2aWdhdGlvbk9wdGlvbnMsIE91dGxldCB9IGZyb20gJy4vbnMtbG9jYXRpb24tdXRpbHMnO1xuaW1wb3J0IHsgRnJhbWVTZXJ2aWNlIH0gZnJvbSAnLi4vZnJhbWUuc2VydmljZSc7XG5pbXBvcnQgeyBOYXRpdmVTY3JpcHREZWJ1ZyB9IGZyb20gJy4uLy4uL3RyYWNlJztcbmltcG9ydCB7IGZpbmRUb3BBY3RpdmF0ZWRSb3V0ZU5vZGVGb3JPdXRsZXQgfSBmcm9tICcuL3BhZ2Utcm91dGVyLW91dGxldC11dGlscyc7XG5cbmV4cG9ydCB0eXBlIEV4dGVuZGVkTmF2aWdhdGlvbkV4dHJhcyA9IE5hdmlnYXRpb25FeHRyYXMgJiBOYXZpZ2F0aW9uT3B0aW9ucztcblxuZXhwb3J0IGludGVyZmFjZSBCYWNrTmF2aWdhdGlvbk9wdGlvbnMge1xuICBvdXRsZXRzPzogQXJyYXk8c3RyaW5nPjtcbiAgcmVsYXRpdmVUbz86IEFjdGl2YXRlZFJvdXRlIHwgbnVsbDtcbn1cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCcsXG59KVxuZXhwb3J0IGNsYXNzIFJvdXRlckV4dGVuc2lvbnMge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgcm91dGVyOiBSb3V0ZXIsIHB1YmxpYyBsb2NhdGlvblN0cmF0ZWd5OiBOU0xvY2F0aW9uU3RyYXRlZ3ksIHB1YmxpYyBmcmFtZVNlcnZpY2U6IEZyYW1lU2VydmljZSkge31cblxuICBwdWJsaWMgbmF2aWdhdGUoY29tbWFuZHM6IGFueVtdLCBleHRyYXM/OiBFeHRlbmRlZE5hdmlnYXRpb25FeHRyYXMpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICBpZiAoZXh0cmFzKSB7XG4gICAgICB0aGlzLmxvY2F0aW9uU3RyYXRlZ3kuX3NldE5hdmlnYXRpb25PcHRpb25zKGV4dHJhcyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnJvdXRlci5uYXZpZ2F0ZShjb21tYW5kcywgZXh0cmFzKTtcbiAgfVxuXG4gIHB1YmxpYyBuYXZpZ2F0ZUJ5VXJsKHVybDogc3RyaW5nIHwgVXJsVHJlZSwgb3B0aW9ucz86IE5hdmlnYXRpb25PcHRpb25zKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgIHRoaXMubG9jYXRpb25TdHJhdGVneS5fc2V0TmF2aWdhdGlvbk9wdGlvbnMob3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnJvdXRlci5uYXZpZ2F0ZUJ5VXJsKHVybCk7XG4gIH1cblxuICBwdWJsaWMgYmFjayhiYWNrTmF2aWdhdGlvbk9wdGlvbnM/OiBCYWNrTmF2aWdhdGlvbk9wdGlvbnMpIHtcbiAgICBpZiAoYmFja05hdmlnYXRpb25PcHRpb25zKSB7XG4gICAgICB0aGlzLmJhY2tPdXRsZXRzKGJhY2tOYXZpZ2F0aW9uT3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubG9jYXRpb25TdHJhdGVneS5iYWNrKCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGNhbkdvQmFjayhiYWNrTmF2aWdhdGlvbk9wdGlvbnM/OiBCYWNrTmF2aWdhdGlvbk9wdGlvbnMpIHtcbiAgICBsZXQgY2FuR29CYWNrID0gdHJ1ZTtcbiAgICBpZiAoYmFja05hdmlnYXRpb25PcHRpb25zKSB7XG4gICAgICBjb25zdCB7IG91dGxldHNUb0JhY2ssIG91dGxldHMgfSA9IHRoaXMuZmluZE91dGxldHNUb0JhY2soYmFja05hdmlnYXRpb25PcHRpb25zKTtcblxuICAgICAgaWYgKG91dGxldHNUb0JhY2subGVuZ3RoICE9PSBvdXRsZXRzLmxlbmd0aCkge1xuICAgICAgICBOYXRpdmVTY3JpcHREZWJ1Zy5yb3V0ZXJFcnJvcignTm8gb3V0bGV0IGZvdW5kIHJlbGF0aXZlIHRvIGFjdGl2YXRlZCByb3V0ZScpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0bGV0c1RvQmFjay5mb3JFYWNoKChvdXRsZXRUb0JhY2spID0+IHtcbiAgICAgICAgICBpZiAoIXRoaXMubG9jYXRpb25TdHJhdGVneS5jYW5Hb0JhY2sob3V0bGV0VG9CYWNrKSkge1xuICAgICAgICAgICAgY2FuR29CYWNrID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FuR29CYWNrID0gdGhpcy5sb2NhdGlvblN0cmF0ZWd5LmNhbkdvQmFjaygpO1xuICAgIH1cblxuICAgIHJldHVybiBjYW5Hb0JhY2s7XG4gIH1cblxuICBwdWJsaWMgYmFja1RvUHJldmlvdXNQYWdlKCkge1xuICAgIHRoaXMuZnJhbWVTZXJ2aWNlLmdldEZyYW1lKCkuZ29CYWNrKCk7XG4gIH1cblxuICBwdWJsaWMgY2FuR29CYWNrVG9QcmV2aW91c1BhZ2UoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZnJhbWVTZXJ2aWNlLmdldEZyYW1lKCkuY2FuR29CYWNrKCk7XG4gIH1cblxuICBwcml2YXRlIGJhY2tPdXRsZXRzKG9wdGlvbnM6IEJhY2tOYXZpZ2F0aW9uT3B0aW9ucykge1xuICAgIGNvbnN0IHsgb3V0bGV0c1RvQmFjaywgb3V0bGV0cyB9ID0gdGhpcy5maW5kT3V0bGV0c1RvQmFjayhvcHRpb25zKTtcblxuICAgIGlmIChvdXRsZXRzVG9CYWNrLmxlbmd0aCAhPT0gb3V0bGV0cy5sZW5ndGgpIHtcbiAgICAgIE5hdGl2ZVNjcmlwdERlYnVnLnJvdXRlckVycm9yKCdObyBvdXRsZXQgZm91bmQgcmVsYXRpdmUgdG8gYWN0aXZhdGVkIHJvdXRlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dGxldHNUb0JhY2suZm9yRWFjaCgob3V0bGV0VG9CYWNrKSA9PiB7XG4gICAgICAgIGlmIChvdXRsZXRUb0JhY2suaXNQYWdlTmF2aWdhdGlvbkJhY2spIHtcbiAgICAgICAgICBOYXRpdmVTY3JpcHREZWJ1Zy5yb3V0ZXJFcnJvcignQXR0ZW1wdGVkIHRvIGNhbGwgc3RhcnRHb0JhY2sgd2hpbGUgZ29pbmcgYmFjazonKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmxvY2F0aW9uU3RyYXRlZ3kuYmFjayhvdXRsZXRUb0JhY2spO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWxpbmUtbGVuZ3RoXG4gIHByaXZhdGUgZmluZE91dGxldHNUb0JhY2sob3B0aW9ucz86IEJhY2tOYXZpZ2F0aW9uT3B0aW9ucyk6IHsgb3V0bGV0c1RvQmFjazogQXJyYXk8T3V0bGV0Pjsgb3V0bGV0czogQXJyYXk8c3RyaW5nPiB9IHtcbiAgICBjb25zdCBvdXRsZXRzVG9CYWNrOiBBcnJheTxPdXRsZXQ+ID0gW107XG4gICAgY29uc3Qgcm9vdFJvdXRlOiBBY3RpdmF0ZWRSb3V0ZSA9IHRoaXMucm91dGVyLnJvdXRlclN0YXRlLnJvb3Q7XG4gICAgbGV0IG91dGxldHMgPSBvcHRpb25zLm91dGxldHM7XG4gICAgbGV0IHJlbGF0aXZlUm91dGUgPSBvcHRpb25zLnJlbGF0aXZlVG8gfHwgcm9vdFJvdXRlO1xuXG4gICAgY29uc3QgcmVsYXRpdmVSb3V0ZU91dGxldCA9IHRoaXMuZmluZE91dGxldEJ5Um91dGUocmVsYXRpdmVSb3V0ZSk7XG4gICAgY29uc3QgaXNOU0VtcHR5T3V0bGV0ID0gcmVsYXRpdmVSb3V0ZU91dGxldCAmJiByZWxhdGl2ZVJvdXRlT3V0bGV0LmlzTlNFbXB0eU91dGxldDtcblxuICAgIC8vIExhenkgbmFtZWQgb3V0bGV0IGhhcyBhZGRlZCAncHJpbWFyeScgaW5uZXIgTlNFbXB0eU91dGxldCBjaGlsZC5cbiAgICAvLyBUYWtlIHBhcmVudCByb3V0ZSB3aGVuIGByZWxhdGl2ZVRvYCBvcHRpb24gcG9pbnRzIHRvIHRoZSBvdXRlciBuYW1lZCBvdXRsZXQuXG4gICAgaWYgKGlzTlNFbXB0eU91dGxldCAmJiByZWxhdGl2ZVJvdXRlLm91dGxldCAhPT0gJ3ByaW1hcnknKSB7XG4gICAgICByZWxhdGl2ZVJvdXRlID0gcmVsYXRpdmVSb3V0ZS5wYXJlbnQgfHwgcmVsYXRpdmVSb3V0ZTtcbiAgICB9XG5cbiAgICBjb25zdCByb3V0ZXNUb01hdGNoID0gb3V0bGV0cyA/IHJlbGF0aXZlUm91dGUuY2hpbGRyZW4gOiBbcmVsYXRpdmVSb3V0ZV07XG4gICAgb3V0bGV0cyA9IG91dGxldHMgfHwgW3JlbGF0aXZlUm91dGUub3V0bGV0XTtcblxuICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCByb3V0ZXNUb01hdGNoLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgY29uc3QgY3VycmVudFJvdXRlID0gcm91dGVzVG9NYXRjaFtpbmRleF07XG4gICAgICBpZiAob3V0bGV0cy5zb21lKChjdXJyZW50T3V0bGV0KSA9PiBjdXJyZW50T3V0bGV0ID09PSBjdXJyZW50Um91dGUub3V0bGV0KSkge1xuICAgICAgICBjb25zdCBvdXRsZXQgPSB0aGlzLmZpbmRPdXRsZXRCeVJvdXRlKGN1cnJlbnRSb3V0ZSk7XG5cbiAgICAgICAgaWYgKG91dGxldCkge1xuICAgICAgICAgIG91dGxldHNUb0JhY2sucHVzaChvdXRsZXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgb3V0bGV0c1RvQmFjazogb3V0bGV0c1RvQmFjaywgb3V0bGV0czogb3V0bGV0cyB9O1xuICB9XG5cbiAgcHJpdmF0ZSBmaW5kT3V0bGV0QnlSb3V0ZShjdXJyZW50Um91dGU6IEFjdGl2YXRlZFJvdXRlKTogT3V0bGV0IHtcbiAgICBsZXQgb3V0bGV0O1xuXG4gICAgY29uc3QgY3VycmVudFJvdXRlU25hcHNob3AgPSBmaW5kVG9wQWN0aXZhdGVkUm91dGVOb2RlRm9yT3V0bGV0KGN1cnJlbnRSb3V0ZS5zbmFwc2hvdCk7XG4gICAgY29uc3Qgb3V0bGV0S2V5ID0gdGhpcy5sb2NhdGlvblN0cmF0ZWd5LmdldFJvdXRlRnVsbFBhdGgoY3VycmVudFJvdXRlU25hcHNob3ApO1xuICAgIG91dGxldCA9IHRoaXMubG9jYXRpb25TdHJhdGVneS5maW5kT3V0bGV0KG91dGxldEtleSwgY3VycmVudFJvdXRlU25hcHNob3ApO1xuXG4gICAgcmV0dXJuIG91dGxldDtcbiAgfVxufVxuIl19