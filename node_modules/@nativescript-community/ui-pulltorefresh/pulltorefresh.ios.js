import { Color } from '@nativescript/core/color';
import { backgroundColorProperty, colorProperty, Utils, } from '@nativescript/core';
import { indicatorColorProperty, indicatorColorStyleProperty, indicatorFillColorProperty, indicatorFillColorStyleProperty, PullToRefreshBase, refreshingProperty } from './pulltorefresh-common';
export * from './pulltorefresh-common';
var PullToRefreshHandler = /** @class */ (function (_super) {
    __extends(PullToRefreshHandler, _super);
    function PullToRefreshHandler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PullToRefreshHandler.initWithOnwer = function (owner) {
        var impl = PullToRefreshHandler.new();
        impl._owner = owner;
        return impl;
    };
    PullToRefreshHandler.prototype.handleRefresh = function (refreshControl) {
        var pullToRefresh = this._owner.get();
        pullToRefresh.refreshing = true;
        pullToRefresh.notify({
            eventName: PullToRefreshBase.refreshEvent,
            object: pullToRefresh,
        });
    };
    PullToRefreshHandler.ObjCExposedMethods = {
        handleRefresh: { returns: interop.types.void, params: [UIRefreshControl] },
    };
    return PullToRefreshHandler;
}(NSObject));
const SUPPORT_REFRESH_CONTROL = Utils.ios.MajorVersion >= 10;
export class PullToRefresh extends PullToRefreshBase {
    constructor() {
        super();
        this.refreshControl = UIRefreshControl.alloc().init();
        this._handler = PullToRefreshHandler.initWithOnwer(new WeakRef(this));
        this.refreshControl.addTargetActionForControlEvents(this._handler, 'handleRefresh', 4096 /* ValueChanged */);
    }
    onLoaded() {
        super.onLoaded();
        this._onContentChanged(null, this.content);
    }
    _onContentChanged(oldView, newView) {
        if (!newView || !newView.nativeViewProtected) {
            return;
        }
        const nNewView = newView.nativeViewProtected;
        if (nNewView instanceof UIScrollView) {
            if (SUPPORT_REFRESH_CONTROL) {
                nNewView.refreshControl = this.refreshControl;
            }
            else {
                // ensure that we can trigger the refresh, even if the content is not large enough
                nNewView.alwaysBounceVertical = true;
                nNewView.addSubview(this.refreshControl);
            }
        }
        else if (nNewView instanceof WKWebView) {
            if (SUPPORT_REFRESH_CONTROL) {
                nNewView.scrollView.refreshControl = this.refreshControl;
            }
            else {
                // ensure that we can trigger the refresh, even if the content is not large enough
                nNewView.scrollView.alwaysBounceVertical = true;
                nNewView.scrollView.addSubview(this.refreshControl);
            }
        }
        else if (typeof TKListView !== 'undefined' &&
            nNewView instanceof TKListView) {
            if (SUPPORT_REFRESH_CONTROL) {
                nNewView.collectionView.refreshControl = this.refreshControl;
            }
            else {
                // ensure that we can trigger the refresh, even if the content is not large enough
                nNewView.collectionView.alwaysBounceVertical = true;
                nNewView.collectionView.addSubview(this.refreshControl);
            }
        }
        else if (nNewView instanceof WKWebView) {
            if (SUPPORT_REFRESH_CONTROL) {
                nNewView.scrollView.refreshControl = this.refreshControl;
            }
            else {
                // ensure that we can trigger the refresh, even if the content is not large enough
                nNewView.scrollView.alwaysBounceVertical = true;
                nNewView.scrollView.addSubview(this.refreshControl);
            }
        }
        else {
            throw new Error('Content must inherit from either UIScrollView or WKWebView!');
        }
    }
    [refreshingProperty.getDefault]() {
        return false;
    }
    [refreshingProperty.setNative](value) {
        if (value) {
            this.refreshControl.beginRefreshing();
        }
        else {
            this.refreshControl.endRefreshing();
        }
    }
    [colorProperty.getDefault]() {
        return this.refreshControl.tintColor;
    }
    [colorProperty.setNative](value) {
        const color = value instanceof Color ? value.ios : value;
        this.refreshControl.tintColor = color;
    }
    [backgroundColorProperty.getDefault]() {
        return this.refreshControl.backgroundColor;
    }
    [backgroundColorProperty.setNative](value) {
        const color = value instanceof Color ? value.ios : value;
        this.refreshControl.backgroundColor = color;
    }
    [indicatorColorProperty.getDefault]() {
        return this.refreshControl.tintColor;
    }
    [indicatorColorProperty.setNative](value) {
        const color = value ? value.ios : this.color;
        this.refreshControl.tintColor = color;
    }
    [indicatorColorStyleProperty.getDefault]() {
        return this.refreshControl.tintColor;
    }
    [indicatorColorStyleProperty.setNative](value) {
        // Inline property has priority
        if (this.indicatorColor) {
            return;
        }
        const color = value ? value.ios : this.color;
        this.refreshControl.tintColor = color;
    }
    [indicatorFillColorProperty.getDefault]() {
        return this.refreshControl.backgroundColor;
    }
    [indicatorFillColorProperty.setNative](value) {
        const color = value ? value.ios : this.backgroundColor;
        this.refreshControl.backgroundColor = color;
    }
    [indicatorFillColorStyleProperty.getDefault]() {
        return this.refreshControl.backgroundColor;
    }
    [indicatorFillColorStyleProperty.setNative](value) {
        // Inline property has priority
        if (this.indicatorFillColor) {
            return;
        }
        const color = value ? value.ios : this.backgroundColor;
        this.refreshControl.backgroundColor = color;
    }
}
//# sourceMappingURL=pulltorefresh.ios.js.map