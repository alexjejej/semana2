import { Color, ContentView, CssProperty, CSSType, Property, Style, View } from '@nativescript/core';
let PullToRefreshBase = class PullToRefreshBase extends ContentView {
    _addChildFromBuilder(name, value) {
        // copy inheritable style property values
        const originalColor = value.style.color || null;
        const originaBackgroundColor = value.style.backgroundColor || null;
        if (value instanceof View) {
            this.content = value;
        }
        // reset inheritable style property values as we do not want those to be inherited
        value.style.color = originalColor;
        value.style.backgroundColor = originaBackgroundColor;
    }
};
PullToRefreshBase.refreshEvent = 'refresh';
PullToRefreshBase = __decorate([
    CSSType('PullToRefresh')
], PullToRefreshBase);
export { PullToRefreshBase };
export const refreshingProperty = new Property({
    name: 'refreshing',
    defaultValue: false,
});
refreshingProperty.register(PullToRefreshBase);
export const indicatorColorProperty = new Property({
    name: 'indicatorColor',
    affectsLayout: true,
    valueConverter: (v) => {
        if (!Color.isValid(v)) {
            return null;
        }
        return new Color(v);
    },
});
indicatorColorProperty.register(PullToRefreshBase);
export const indicatorColorStyleProperty = new CssProperty({
    name: 'indicatorColorStyle',
    cssName: 'indicator-color',
    affectsLayout: true,
    valueConverter: (v) => {
        if (!Color.isValid(v)) {
            return null;
        }
        return new Color(v);
    },
});
indicatorColorStyleProperty.register(Style);
export const indicatorFillColorProperty = new Property({
    name: 'indicatorFillColor',
    affectsLayout: true,
    valueConverter: (v) => {
        if (!Color.isValid(v)) {
            return null;
        }
        return new Color(v);
    },
});
indicatorFillColorProperty.register(PullToRefreshBase);
export const indicatorFillColorStyleProperty = new CssProperty({
    name: 'indicatorFillColorStyle',
    cssName: 'indicator-fill-color',
    affectsLayout: true,
    valueConverter: (v) => {
        if (!Color.isValid(v)) {
            return null;
        }
        return new Color(v);
    },
});
indicatorFillColorStyleProperty.register(Style);
//# sourceMappingURL=pulltorefresh-common.js.map