import { backgroundColorProperty, colorProperty } from '@nativescript/core';
import { Color } from '@nativescript/core/color';
import { indicatorColorProperty, indicatorColorStyleProperty, indicatorFillColorProperty, indicatorFillColorStyleProperty, PullToRefreshBase, refreshingProperty } from './pulltorefresh-common';
export * from './pulltorefresh-common';
export class PullToRefresh extends PullToRefreshBase {
    //@ts-ignore
    get android() {
        return this.nativeView;
    }
    createNativeView() {
        const swipeRefreshLayout = new com.nativescript.swiperefreshlayout.CarouselFriendlySwipeRefreshLayout(this._context);
        return swipeRefreshLayout;
    }
    initNativeView() {
        super.initNativeView();
        const nativeView = this.nativeView;
        const androidXListener = new androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener({
            onRefresh: () => {
                this.refreshing = true;
                this.notify({
                    eventName: PullToRefreshBase.refreshEvent,
                    object: this,
                });
            },
        });
        nativeView.setOnRefreshListener(androidXListener);
        nativeView.refreshListener = androidXListener;
    }
    disposeNativeView() {
        const nativeView = this.nativeView;
        nativeView.refreshListener = null;
        super.disposeNativeView();
    }
    [refreshingProperty.getDefault]() {
        return false;
    }
    [refreshingProperty.setNative](value) {
        this.nativeView.setRefreshing(value);
    }
    [colorProperty.setNative](value) {
        const color = value instanceof Color ? value.android : value;
        this.nativeView.setColorSchemeColors([color]);
    }
    [backgroundColorProperty.setNative](value) {
        const color = value instanceof Color ? value.android : value;
        this.nativeView.setProgressBackgroundColorSchemeColor(color);
    }
    [indicatorColorProperty.setNative](value) {
        const color = value ? value.android : this.color;
        this.nativeView.setColorSchemeColors([color]);
    }
    [indicatorColorStyleProperty.setNative](value) {
        // Inline property has priority
        if (this.indicatorColor) {
            return;
        }
        const color = value ? value.android : this.color;
        this.nativeView.setColorSchemeColors([color]);
    }
    [indicatorFillColorProperty.setNative](value) {
        const color = value ? value.android : this.backgroundColor;
        this.nativeView.setProgressBackgroundColorSchemeColor(color);
    }
    [indicatorFillColorStyleProperty.setNative](value) {
        // Inline property has priority
        if (this.indicatorFillColor) {
            return;
        }
        const color = value ? value.android : this.backgroundColor;
        this.nativeView.setProgressBackgroundColorSchemeColor(color);
    }
}
//# sourceMappingURL=pulltorefresh.android.js.map